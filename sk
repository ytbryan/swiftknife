#!/usr/bin/env ruby
require 'digest/md5'
require 'rubygems'
require 'xcodeproj'
require 'highline'
require 'fileutils'
require 'commander/import'
require 'erb'
require 'tilt'
require 'yaml'

program :version, '0.0.1'
program :description, 'swiftknife is a small swift class to write lesser code'

command :add do |c|
  c.syntax = 'swiftknife add [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|

    #create a reference
    proj = Xcodeproj::Project.open("swipe.xcodeproj")
    # proj.new_group("plugins")
    proj["swipe"].new_file("#{input}.swift")
    proj.save
    #create the file
    FileUtils.touch("swipe/#{input}.swift")

    exit() unless args.count != 0

    template = Tilt.new('UITableViewController.swift.erb')
    data = template.render(self, :class_name=> args.first,
                                 :project_name=>"swipe",
                                 :author=>"Bryan Lim",
                                 :date=>"07/10/1085",
                                 :year => "1985",
                                 :organisation=>"TADA")
    FileUtils.touch("")
    File.write("", "w") { |file| file.write(data)}

  end
end

command :uninstall do |c|
  c.syntax = 'swiftknife remove [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    input = ask "Are you sure you want to uninstall swiftknife? (Y/n)"
    if input == "Y"
      status = system("rm -rf plugins/swiftknife.swift")
      puts "swiftknife uninstalled" unless status == true
      puts "uninstallation failed" unless status == false
    elsif input == "n"
      puts "Cancelled."
    end
  end
end

command :install do |c|
  c.syntax = 'swiftknife add [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    array = find_xcodeproj()
    if array.count > 1
      str = "\n"
      array.count.times do |index|
        str = str + "#{index}. " + array[index] + "\n"
      end
      input = ask "Which xcodeproj do you wish to install swiftknife on: #{str}"
      add_swiftknife(array, "#{input}".to_i)
    elsif array.count == 0
      puts "No xcodeproj found."
      exit
    elsif array.count == 1
      add_swiftknife(array, 0)
    end
  end
end

private

def askProjectDetails
  puts "These will be attached to the signature on top of each files"
  input = ask "What's the author's name?"
  puts "ok: #{input}"
  input2 = ask "What's the organisation's name?"
  puts "ok: #{input2}"


  # FileUtils.touch(".swiftknife/data.yml")
  # FileUtils.touch(".swiftknife/templates")

  # File.open('data.yml', 'w') { |file| file.write("") }
  data = YAML::load_file('data.yml') #Load
  data['project']['author'] = "#{input}" #Modify
  data['project']['organization'] = "#{input2}" #Modify
  File.open('data.yml', 'w') {|f| f.write data.to_yaml } #Store
end

# USAGE: md5(args.join(" "))
def md5(value)
  val = Digest::MD5.hexdigest(value).to_s.insert(8, "-").insert(13, "-").insert(18, "-").insert(23, "-")
  return val
end

def find_xcodeproj
  xcodeproj_file_arr = Dir.glob('*.xcodeproj')
  return xcodeproj_file_arr
end

def add_swiftknife(array, index)
    puts "installing swiftknife..."
    proj = Xcodeproj::Project.open("#{array[index]}")
    proj.new_group("plugins")
    proj["plugins"].new_file("plugins/swiftknife.swift")
    proj.save
    #download swiftknife.swift, move it in
    FileUtils.mkdir("plugins") unless Dir.exists?("plugins")
    swiftknife_url = "https://raw.githubusercontent.com/ytbryan/swiftknife/master/swiftknife.swift"
    system("curl -o plugins/swiftknife.swift #{swiftknife_url}")
end
